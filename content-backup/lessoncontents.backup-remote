{ "__v" : 0, "_id" : { "$oid" : "51a8eaeabac630501e000003" }, "content" : "<div class=\"lesson\" id=\"0\">\n    <h3>What is Smithy?</h3><div class=\"sublesson\">Smithy is a technology for developing gadget-based applications. The name refers to both a collection of technologies and a particular library that provides gadget layout and life-cycle. Each technology in smithy is its own library and is usable on its own, but the technologies are most effectively used together.<br style=\"font-size: medium; font-weight: normal;\" /><span style=\"font-size: medium; font-weight: normal;\"> <br />Below is a list of the individual libraries and each is briefly described</span><span style=\"font-size: medium; font-weight: normal;\"> in the following pages: </span><br style=\"font-size: medium; font-weight: normal;\" /><span style=\"font-size: medium; font-weight: normal;\"> </span><br style=\"font-size: medium; font-weight: normal;\" /><a href=\"https://github.com/atsid/bullhorn-js\" style=\"font-size: medium; font-weight: normal;\" target=\"_self\">bullhorn-js </a><span style=\"font-size: medium; font-weight: normal;\"> - a topic-based messaging library</span><br style=\"font-size: medium; font-weight: normal;\" /><a href=\"https://github.com/atsid/schematic-js\" style=\"font-size: medium; font-weight: normal;\" target=\"_self\">schematic-js</a><span style=\"font-size: medium; font-weight: normal;\"> - a </span><a href=\"http://json-schema.org/\" style=\"font-size: medium; font-weight: normal;\" target=\"_self\">JSONSchema </a><span style=\"font-size: medium; font-weight: normal;\">-based model library</span><br style=\"font-size: medium; font-weight: normal;\" /><a href=\"https://github.com/atsid/circuits-js\" style=\"font-size: medium; font-weight: normal;\" target=\"_self\">circuits-js</a><span style=\"font-size: medium; font-weight: normal;\"> - an SMD-based service library</span><br style=\"font-size: medium; font-weight: normal;\" /><a href=\"https://github.com/atsid/smithy-js\" style=\"font-size: medium; font-weight: normal;\" target=\"_self\">smithy-js</a><span style=\"font-size: medium; font-weight: normal;\"> - a gadget-based application framework</span><br style=\"font-size: medium; font-weight: normal;\" /><a href=\"https://github.com/atsid/amd-plugins\" style=\"font-size: medium; font-weight: normal;\" target=\"_self\">amd-plugins</a><span style=\"font-size: medium; font-weight: normal;\"> - a library of support AMD plugins </span><br style=\"font-size: medium; font-weight: normal;\" /></div><div><span style=\"font-size: medium; font-weight: normal;\"><br /></span></div><div class=\"sublesson\">\n    </div></div>\n", "highlightBegin" : "^.", "highlightEnd" : ".$", "order" : 0 }
{ "__v" : 0, "_id" : { "$oid" : "51a8eaeabac630501e000006" }, "content" : "<div class=\"lesson\" id=\"3\">\n    <h3>Creating a Simple Gadget</h3>\n<p>The code below illustrates a very simple gadget that displays configurable text as a first-level heading. It demonstrates some of the fundamental aspects of a gadget:<br /><br />A gadget is an AMD module.<br /> <br />Gadgets are written using the same &quot;view&quot; technology as the view factory configured for the application (dojo is illustrated here using a simple dijit content pane).<br /> <br />The gadget is derived from smithy/Gadget which provides life-cycle methods (like the &quot;setupView&quot; method shown below) <br /> <br />The gadget is passed configuration when it is created by the gadget space (such as the applicationTitle shown below).</p>\n</div>\n", "highlightBegin" : "^.", "highlightEnd" : ".$", "order" : 1, "sourceFile" : "gadgets/TitleGadget.js" }
{ "__v" : 0, "_id" : { "$oid" : "51a8eaeabac630501e000009" }, "content" : "<div class=\"lesson\" id=\"5\">\n    <h3>Adding a Service to a Gadget</h3>\n<p>In the &quot;Creating Gadgets&quot; lesson we saw that smithy provides a life-cycle method for setting up services so a gadget can communicate with a data-access backend. The service support is provided by circuits which operates on an SMD that describes the service. Below is the SMD used by the gadget previously mentioned. It is a JSONP service provided by Yahoo. The &quot;Services&quot; section defines the calls that will be provided on the service object added to the gadget.</p>\n</div>\n", "highlightBegin" : "^.", "highlightEnd" : ".$", "order" : "0", "sourceFile" : "schema/services/YqlService" }
{ "__v" : 0, "_id" : { "$oid" : "51a8eaeabac630501e00000f" }, "content" : "<div class=\"lesson\" id=\"6\">\n    <h3>Views</h3>\n<p>Smithy doesn't directly provide a rendering library. It instead abstracts the core concepts of gadgets (messaging, services, models, and abstract locations) away from any particular visual implementation and uses abstract &quot;views&quot; to handle the visual elements. Since the term &quot;view&quot; is highly overloaded it is worthwhile to say briefly what a view is to smithy:\n<br /><br />There are two &quot;types&quot; of views, container views (views that implement the layout modes supported by smithy) and gadget views.<br />A gadget view is all the visual elements used by the gadget and its only strict requirement is that it can be passed to a container view's &quot;addChild()&quot; method. In this tutorial the gadgets are their own views (derived from dijit widgets).<br />The only strict requirement for container views is that they must implement the methods shown in the code below (the current implementation of DojoBorderView, which mostly delegates directly to dojo), and support one of the layout modes supported by smithy.<br /> <br />Of course, you can't have an application without visual elements, so smithy provides a simple implementation using dojo.</p>\n</div>\n", "highlightBegin" : "^.", "highlightEnd" : ".$", "order" : 1, "sourceFile" : "code-snippets/DojoBorderView.js" }
{ "__v" : 0, "_id" : { "$oid" : "51a8eaeabac630501e000012" }, "content" : "<div class=\"lesson\" id=\"2\">\n    <h3>Setting Up AMD</h3>\n    <p>Since Smithy uses AMD to define and load its modules, the first thing an application needs to to do is configure AMD. Since this tutorial uses dojo, it also uses the dojo AMD loader. <br /> <br />Dojo's loader is located in the core dojo.js file and accepts a config object as seen below. The configuration illustrated below tells the dojo AMD loader to load asynchronously and where to find modules pre-pended with &quot;schema&quot; and &quot;application&quot;. </p>\n</div>", "highlightBegin" : "^.", "highlightEnd" : ".$", "order" : "0", "sourceFile" : "code-snippets/amdconfig.html" }
{ "__v" : 0, "_id" : { "$oid" : "51a8eaeabac630501e000015" }, "content" : "<div class=\"lesson\" id=\"7\">\n    <h3>Adjusting a Service URL with a URL plugin</h3>\n<p>The &quot;url&quot; plugin type allows a client to modify a url for a service call. The code below shows what such a plugin would look like. The &quot;pointcut&quot; property is modeled after AOP pointcuts and states that this plugin should be called for every method on service1. The fn property is the function called and it accepts the generated url and service method as an argument. Its return value will be used as the new url.</p>\n</div>\n", "highlightBegin" : "^.", "highlightEnd" : ".$", "order" : 1, "sourceFile" : "code-snippets/urlpluginsample.js" }
{ "__v" : 0, "_id" : { "$oid" : "51a8eaeabac630501e00001e" }, "content" : "<div class=\"lesson\" id=\"9\">\n    <h3>Other Features of Smithy</h3>\n<p>The Smithy libraries have many other features to help build robust gadget-based applications. This section contains a brief description of some of those features.</p>\n</div>\n", "highlightBegin" : "^.", "highlightEnd" : ".$", "order" : "0", "sourceFile" : "" }
{ "__v" : 0, "_id" : { "$oid" : "51b0b9fd143159080c000013" }, "content" : "<div class=\"lesson\" id=\"0\">\n    <h3>bullhorn-js </h3><p>Bullhorn provides an API for agents to publish and subscribe to message channels. The channels are described by a <a href=\"http://json-schema.org/\" target=\"_self\">JSONSchema</a> schema, created via a channel factory, and operated on using the convenient calls for publishing and subscribing. See code below for a simple example.<br /> <br />Smithy-js uses bullhorn for system event notifications, and gadgets use bullhorn to communicate with each other and the framework.</p><div class=\"sublesson\"></div><div class=\"sublesson\">\n    </div></div>\n", "highlightBegin" : "^.", "highlightEnd" : ".$", "order" : 2, "sourceFile" : "code-snippets/bullhornsnippet.js" }
{ "__v" : 0, "_id" : { "$oid" : "51b0ba6e143159080c000014" }, "content" : "\n<h3>schematic-js </h3><p>Schematic provides support for creating, encapsulating, initializing and validating <a href=\"http://json-schema.org/\" target=\"_self\">JSONSchema</a>-based models. It enforces a schema's data model and provides a convenient validation plugin capability. See code below for a simple example.<br /> <br />Smithy-js uses models to serialize and realize layouts. Model factories are made available to gadgets to allow model-based data handling in gadgets.</p>\n", "highlightBegin" : "^.", "highlightEnd" : ".$", "order" : 3, "sourceFile" : "code-snippets/schematicsnippet.js" }
{ "__v" : 0, "_id" : { "$oid" : "51b0ba8c143159080c000015" }, "content" : "<div class=\"lesson\" id=\"0\">\n    <h3>circuits-js</h3><p>Circuits is a full-featured service support library. Services are described by Service Method Descriptors. These descriptors are interpreted to provide convenient service call api's. Once an SMD is defined, the client only needs to make a simple call on the service object and circuits takes care of the rest.<br /><br />See code below for a simple example.<br /> <br />Life-cycle methods are made available to gadgets to allow easy access to services described by SMD's. </p><div class=\"sublesson\">\n    </div></div>\n", "highlightBegin" : "^.", "highlightEnd" : ".$", "order" : 4, "sourceFile" : "code-snippets/circuitssnippet.js" }
{ "__v" : 0, "_id" : { "$oid" : "51b0ca28143159080c000016" }, "content" : "<div class=\"lesson\" id=\"3\">\n    <h3>What are Gadgets?</h3><div class=\"lesson\" id=\"0\" style=\"font-size: medium; font-weight: normal;\"></div><blockquote style=\"font-size: medium; font-weight: normal; margin: 0px 0px 0px 40px; border: none; padding: 0px;\"></blockquote><span style=\"font-size: medium; font-weight: normal;\">Gadgets are a modular unit of user interface functionality. They can be thought of as a self-contained interaction component that accomplishes some aspect of the application's functionality. The intention of segmenting functionality into these independent user interface components is that they can then be re-used as building blocks for larger aggregations of application functionality or custom workflows.</span><br />Gadgets should not be confused with widgets. A widget is a much smaller component representing some interaction element such as a list box, textarea, checkbox, etc. Gadgets are composed of widgets as the user interface controls for building the desired functionality of the component.</div><div class=\"sublesson\">\n</div>\n\n", "highlightBegin" : "^.", "highlightEnd" : ".$", "order" : 0, "sourceFile" : "" }
{ "__v" : 0, "_id" : { "$oid" : "51b0dc30143159080c000017" }, "content" : "<div class=\"lesson\" id=\"0\">\n    <h3>Prerequisite Technologies</h3>\n\n    <p class=\"Summary\">The smithy libraries use certain technologies and approaches that are worth mentioning before delving any deeper into smithy.<br /><br /><a href=\"https://github.com/amdjs/amdjs-api/wiki/AMD\" target=\"_self\">Asynchronous Module Definition</a> - Smithy uses AMD for its module definition and loading. Smithy is built to be used by complex javascript applications where the capability to define discrete modules is a necessity.<br /><br /><a href=\"http://json-schema.org/\" target=\"_self\">JSONSchema </a>- Smithy relies heavily on JSONSchema to describe it's models, services and messages. This meta-data allows for the clean exchange of data among gadgets and between gadgets and services.<br /> <br /><a href=\"http://www.ecma-international.org/publications/files/ECMA-ST/Ecma-262.pdf\" target=\"_self\">ECMAScript 5.1</a> - Smithy assumes ECMAScript 5.1 compliance.  <br /><br /><a href=\"http://dojotoolkit.org/\" target=\"_self\">DOJO 1.7+</a> - Smithy is view agnostic, and does not strictly depend on dojo, but it is currently packaged with a dojo view implementation and this tutorial uses dojo as a demonstration.<br /><a href=\"http://dojotoolkit.org/reference-guide/1.9/dojo/_base/declare.html#dojo-base-declare\" target=\"_self\"><br />OOD</a> - Smithy makes significant use of object-oriented concepts, but since Javascript doesn't support many OOP concepts directly Smithy uses a detached version of dojo's declare.<br /></p><div class=\"sublesson\">\n    </div></div>\n", "highlightBegin" : "^.", "highlightEnd" : ".$", "order" : 1, "sourceFile" : "" }
{ "__v" : 0, "_id" : { "$oid" : "51b0dcf4143159080c000018" }, "content" : "<div class=\"lesson\" id=\"0\">\n    <h2>Smithy Tutorial</h2><p class=\"Summary\">This tutorial walks you through the creation of a <a href=\"demo-only.html\" target=\"_blank\">simple application</a> using a collection of technologies geared toward writing gadget-based applications called Smithy. To use the tutorial, select lessons on the navigation gadget to the right and move forward and backward through the lesson text using the &quot;Next&quot; and &quot;Previous&quot; buttons below. If there is source code relevant to the current lesson it will be displayed in the code viewer gadget at the lower right.  The code for the entire tutorial can be found on <a href=\"https://github.com/atsid/smithy-tutorial.git\" target=\"_self\">github</a>.<br /><br /></p><div class=\"sublesson\">\n    </div></div>\n", "highlightBegin" : "^.", "highlightEnd" : ".$", "order" : 0, "sourceFile" : "" }
{ "__v" : 0, "_id" : { "$oid" : "51b0f437143159080c000019" }, "content" : "<div class=\"lesson\" id=\"0\">\n    <h3>smithy-js</h3><p>Smithy provides layout and life-cycle support for gadget applications. It provides a surface abstraction with an addressing scheme, flexible configuration for views, services, messages and models through factories, and messages, events and classes for life-cycle management. It is intended to be &quot;view&quot; agnostic, but provides a set of dojo views out of the box.<br /><br />Most of the code seen in the rest of the tutorial will be smithy code.<br /><br /></p><div class=\"sublesson\">\n    </div></div>\n", "highlightBegin" : "^.", "highlightEnd" : ".$", "order" : 5, "sourceFile" : "" }
{ "__v" : 0, "_id" : { "$oid" : "51b0f5ff143159080c00001a" }, "content" : "<div class=\"lesson\" id=\"0\">\n    <h3>amd-plugins</h3><p>The amd-plugins library provides <a href=\"https://github.com/amdjs/amdjs-api/wiki/Loader-Plugins\" target=\"_self\">AMD plugins</a> to help smooth application-level configuration and special dependency loading such as:<br /><br />ioc! - a spring-like inversion of control plugin for loading pre-configured objects as dependecies.<br /> <br />jsonschema! - a plugin for loading fully resolved <a href=\"http://json-schema.org/\" target=\"_self\">JSONSchema</a>'s. <br /><br />properties! - a plugin for loading java style property files. <br /></p><div class=\"sublesson\">\n    </div></div>\n", "highlightBegin" : "^.", "highlightEnd" : ".$", "order" : 6 }
{ "__v" : 0, "_id" : { "$oid" : "51b611be8f9026ac10000001" }, "content" : "<div class=\"lesson\" id=\"2\">\n    <h3>Configuring The GadgetSpace </h3>\n    <p>Before you can add gadgets into your application you need to configure smithy's gadget space. The gadget space is a central object in smithy and controls many of the actions performed on and facilities available to gadgets. Some of the things it is responsible for:<br /></p><ul><li>Controlling the windows in the application and the trees of gadget areas contained in them.</li><li>Providing the registry of available gadgets.<br /></li><li>Managing the configuration passed to gadgets and areas.</li></ul>Smithy tracks the availability of the smithy libraries via factories passed to its configuration, this allows those libraries to be configured independently and smithy to use them without strictly depending on them. Configuring factories and the gadget space is illustrated below. A common theme is the configuration of &quot;resolvers&quot; used to find objects pertinent to the library.<br /><p></p>\n</div>", "highlightBegin" : "^.", "highlightEnd" : ".$", "order" : 2, "sourceFile" : "code-snippets/gadgetspace-config.js" }
{ "__v" : 0, "_id" : { "$oid" : "51b6122b8f9026ac10000002" }, "content" : "<div class=\"lesson\" id=\"2\">\n    <h3>Loading the Smithy Libraries </h3>\n    <p>The next thing you need to do is load the smithy libraries. Below the minified versions are loaded individually to show the libraries involved. Smithy is also available as a single minified file containing the full suite of technologies. The code below also includes an AMD loader (dojo's).</p>\n</div>", "highlightBegin" : "^.", "highlightEnd" : ".$", "order" : 1, "sourceFile" : "code-snippets/loadlibraries.html" }
{ "__v" : 0, "_id" : { "$oid" : "51b6133b8f9026ac10000003" }, "content" : "<div class=\"lesson\" id=\"3\">\n    <h3>Registering the Gadget with the GadgetSpace</h3>\n<p>In order for the gadget space to know about a gadget, the gadget must be registered with the gadget space. The code below registers the previously mentioned TitleGadget to a gadget space passing in static configuration data. The &quot;gadget&quot; configuration property is the name the gadget space uses to load the actual gadget (i.e. passes to the gadget factory), the first argument is the name of the gadget in the application (these could be different if you wanted to use the same gadget with different configurations), and &quot;data&quot; is static configuration passed to the gadget's constructor as &quot;initData&quot;.</p>\n</div>\n", "highlightBegin" : "^.", "highlightEnd" : ".$", "order" : 3, "sourceFile" : "code-snippets/addGadget.js" }
{ "__v" : 0, "_id" : { "$oid" : "51b62bf08f9026ac10000004" }, "content" : "<div class=\"lesson\" id=\"3\">\n    <h3>Adding Gadget Life-cycle Methods</h3>\n<p>The smithy/Gadget class provides gadget life-cycle methods that assist in loading, creating, displaying and removing gadgets from the gadget space. Previously we saw setupView() in the simple title gadget. That method is called to allow the gadget to create its visual elements. In the code below, for a more complex gadget, we see the &quot;setupServices&quot; method which is called to allow a gadget to register the backend services it will use. Inside that method we see a call to &quot;registerService&quot; which is also provided by smithy/Gadget. RegisterService() creates a service object using circuits containing all the calls on the service and attaches it as a property to the gadget for later use. Services registered in this way are automatically shutdown cleanly when the gadget is removed. The SMD for the YqlService can be seen in lesson 3.</p>\n</div>\n", "highlightBegin" : "^.", "highlightEnd" : ".$", "order" : 2, "sourceFile" : "gadgets/StockGadget.js" }
{ "__v" : 0, "_id" : { "$oid" : "51b644cf8f9026ac10000005" }, "content" : "<div class=\"lesson\" id=\"3\">\n    <h3>Loading the Gadget Into the GadgetSpace</h3>\n<p>Once the gadget is registered it can be loaded to an area in the gadget space. The code below loads the TitleGadget into the &quot;top&quot; area of the main window by passing the following to loadGadgetTo(): the name of the gadget as it was registered, the address in the gadget space to load it to, a boolean specifying that intermediate areas should be created if the address implies them, and a config object that will be mixed in to the static initData the gadget was registered with. More information about gadget areas can be found in the Advanced Gadget Layout lesson.</p>\n</div>\n", "highlightBegin" : "^.", "highlightEnd" : ".$", "order" : 4, "sourceFile" : "code-snippets/loadGadget.js" }
{ "__v" : 0, "_id" : { "$oid" : "51b64a198f9026ac10000006" }, "content" : "<div class=\"lesson\" id=\"5\">\n    <h3>Adding a Communication Channel to a Gadget</h3>\n<p>Gadgets can publish and subscribe to messages in the application. Smithy provides life-cycle methods to setup messaging as well as services. In the example below, the smithy-provided setupMessaging() method lets a gadget setup its channels using the smithy provided methods registerSubscriber() and registerPublisher() which track and cleanup the channels for the gadget. The registerPublisher() places a channel publishing method onto the gadget's this.pub.channelName for convenient access. </p>\n</div>\n", "highlightBegin" : "^.", "highlightEnd" : ".$", "order" : 1, "sourceFile" : "code-snippets/channelexample.js" }
{ "__v" : 0, "_id" : { "$oid" : "51b64a418f9026ac10000007" }, "content" : "<div class=\"lesson\" id=\"5\">\n    <h3>Subscribing to System-Level Messages</h3>\n<p>Smithy publishes a set of messages that denote system activity. These messages are published on a separate bus and are subscribed to with a separate life-cycle method, registerFrameworkSubscriber(). The code below adds this call to its setupMessaging() implementation. Other system level channels are:<br /> <br />AreaStatusChange - for changes in area status (msg.status = &quot;CREATED&quot;, &quot;RENDERED&quot;, or &quot;DESTROYED&quot;)<br />GadgetSpaceStatusChange - for changes in the gadget space with the same statuses as above. <br />GadgetRegistrationEvent - for changes in the registered gadgets (msg.event = &quot;GADGETADDED&quot;, or &quot;GAGETREMOVED&quot;)<br />SlagChange - for changes in Slag data (msg contains path, oldValue, and newValue).</p>\n</div>\n", "highlightBegin" : "^.", "highlightEnd" : ".$", "order" : 2, "sourceFile" : "code-snippets/systemchannelexample.js" }
{ "__v" : 0, "_id" : { "$oid" : "51b64e248f9026ac10000009" }, "content" : "<div class=\"lesson\" id=\"6\">\n    <h3>GadgetArea Addresses</h3>\n<p>Smithy divides the gadget space into smaller parts called GadgetArea's. Each GadgetArea can contain either a collection of additional lower-level areas or a gadget, resulting in a tree of gadget areas with gadgets at the leaves. Each area also has a layout mode and an associated view (in the case of an area with a gadget, the mode is &quot;gadget&quot; and the view is the gadget's view). An area's address is derived from its placement in the tree and the layout modes of its ancestors. For instance, the address &quot;windows[0]/top&quot; refers to an area that is in the &quot;top&quot; region of the main window and the main window's layout mode is &quot;borders&quot;. The top-level &quot;windows&quot; areas are special areas that do not have parents. The supported layout modes are &quot;borders&quot;, &quot;rows&quot;, &quot;columns&quot; and &quot;tabs&quot;. Some other examples of address and the areas they reference are:<br /> <br />&quot;windows[1]/rows[1]/top&quot; - references an area which is a child of an area with a &quot;borders&quot; layout mode, that itself is the second child of an extension window (not the main window) with a &quot;rows&quot; layout mode.<br />&quot;windows[0]/columns[0]/tabs[2]&quot; - the third child of an area with &quot;tabs&quot; layout, that is the first child of the main window that has a columns layout. <br /> <br />The code below shows some ways in which addresses are used. </p>\n</div>\n", "highlightBegin" : "^.", "highlightEnd" : ".$", "order" : 0, "sourceFile" : "code-snippets/addressExamples.js" }
{ "__v" : 0, "_id" : { "$oid" : "51b64e798f9026ac1000000a" }, "content" : "<div class=\"lesson\" id=\"6\">\n    <h3>Serialized GadgetSpace</h3>\n<p>Gadget spaces can be serialized and re-rendered. Below is an example of a serialized gadget space that registers three gadgets and loads them into addressed areas.</p>\n</div>\n", "highlightBegin" : "^.", "highlightEnd" : ".$", "order" : 3, "sourceFile" : "code-snippets/serializedGadgetSpace.js" }
{ "__v" : 0, "_id" : { "$oid" : "51b650498f9026ac1000000b" }, "content" : "<div class=\"lesson\" id=\"7\">\n    <h3>Intercepting Service Processing with Plugins</h3>\n<p>Smithy's service support library, circuits, provides a plugin model to allow injection of client processing into many aspects of the service request cycle. It understands plugins of the following types:<br /> <br />'read' - Executed after response payload extraction<br />'write' - Executed before PUT/POST to the server<br />'url' - Executed after the url for the service method is generated<br />'request'  - Executed before any requests are sent, applied to the raw JS request object. <br />'response' - Executed as soon as the response is received, applied to the raw JSON payload. <br />'handler'  - Used to process either the completed response or an error that occurs during the request/response cycle.<br />'mixin'    - Used to modify the Service instance itself.<br />'provider' - Used to supply a circuits/DataProvider that will override the factory-configured provider. <br /> <br />Plugins can be injected at three different levels and have a flexible mechanism for specifying the service and methods they apply to.</p>\n</div>\n", "highlightBegin" : "^.", "highlightEnd" : ".$", "order" : 0, "sourceFile" : "" }
{ "__v" : 0, "_id" : { "$oid" : "51b6506b8f9026ac1000000c" }, "content" : "<div class=\"lesson\" id=\"7\">\n    <h3>Transforming Data into and out of a Service Call</h3>\n<p>Circuits plugins can be used to uniformly transform data before and after service calls. The capability to target specific calls and pattern-matched groups of calls allows transformations to be applied uniformly as cross-cutting concerns. The levels of in/out transformations are are described in the code below. In addition to AOP-like pointcuts, full regular expressions are allowed using the pattern property as in the &quot;request&quot; plugin below.</p>\n</div>\n", "highlightBegin" : "^.", "highlightEnd" : ".$", "order" : 2, "sourceFile" : "code-snippets/transformpluginsample.js" }
{ "__v" : 0, "_id" : { "$oid" : "51b651078f9026ac1000000d" }, "content" : "<div class=\"lesson\" id=\"7\">\n    <h3>Conforming to a Third-Party API</h3>\n<p>Circuits' &quot;mixin&quot; plugin allows a client to add methods to the service object by passing the service object into the plugin's implementation function. The plugin shown below remaps a model service's CRUD calls to a standard set of operations. This is useful for adapting a service to a pre-existing API.</p>\n</div>\n", "highlightBegin" : "^.", "highlightEnd" : ".$", "order" : 3, "sourceFile" : "code-snippets/mixinpluginsample.js" }
{ "__v" : 0, "_id" : { "$oid" : "51b651c48f9026ac1000000e" }, "content" : "<div class=\"lesson\" id=\"9\">\n    <h3>Supporting Standard Browsing Patterns</h3>\n<p>Since Smithy focuses on client-side, single-page applications there is usually only one true server-side resource that maps to the smithy application. Single-page web applications clash somewhat with the web's natural browsing patterns of moving backward and forward through and bookmarking web resources. Smithy solves this by allowing serialized gadget space layouts to be mapped to uri patterns. It supports both explicit mapping of general uri's to pre-defined layouts and automatic mapping of currently displayed layouts to generated hash extensions.  </p>\n</div>", "highlightBegin" : "^.", "highlightEnd" : ".$", "order" : 0, "sourceFile" : "" }
{ "__v" : 0, "_id" : { "$oid" : "51b652218f9026ac10000011" }, "content" : "<div class=\"lesson\" id=\"9\">\n    <h3>Routing Using General URL's</h3>\n<p>Smithy supports mapping url patterns to gadget space layouts via a routing specification that is passed as a configuration property to the PageRoutingGadgetSpace. smithy/PageRoutingGadgetSpace is a specialization of GadgetSpace and must be used (i.e. referenced as the dependency) if the application wants to use page routing. The code below shows a routing specification and how it is passed to the gadget space. Some key features of the routing specification: </p><ul><li>rootPattern - is a regular expression that will match that part of the url that should be factored out before attempting to match any routes.</li><li>default and error routes - specify the layouts that should be used when there is a routing error or if no route could be matched.</li><li>id - this is the AMD module path for the pre-defined layout.</li><li>url - this is a url that can include replacement params in {}'s. The parameters are captured and supplied to the gadgets loaded in the layout.</li><li>route name - the name of the route can be used by application code to navigate to that layout using the gadgetspace.routeTo(&quot;name&quot;) method.</li></ul>\n</div>\n", "highlightBegin" : "^.", "highlightEnd" : ".$", "order" : 2, "sourceFile" : "code-snippets\\pagerouting.js" }
{ "__v" : 0, "_id" : { "$oid" : "51bf40a7169e34a00c000001" }, "content" : "<div class=\"lesson\" id=\"2\">\n    <h3>Putting it all together </h3>\n    <p>Below is a single example index.html page that contains all the setup code. The full setup code is illustrated here in a single page to show the mechanics behind it. Most of the configuration could be streamlined using our amd-plugins (i.e. using ioc to encapsulate the full gadget space configuration), loading single minified versions...etc.<br /> <br />Aside from the configuration discussed in this lesson, the file below also contains stylesheets and code to register some demo gadgets and add them to the gadget space. This code will be discussed in subsequent lessons. </p>\n</div>", "highlightBegin" : "^.", "highlightEnd" : ".$", "order" : 3, "sourceFile" : "demo-only.html" }
{ "__v" : 0, "_id" : { "$oid" : "51c20bace8a74fec1e000005" }, "content" : "<div class=\"lesson\" id=\"7\">\n    <h3>Model Schemas</h3>\n<p>Smithy models are based around <a href=\"http://json-schema.org/\" target=\"_self\">JSONSchema </a>schemas. These schemas describe the meta-data for a javascript object including data type, validation properties (e.g. required, min-max values etc.), and a reference mechanism for referring to other external JSON schemas. The example code below is a JSONSchema schema that shows some of these facilities.<br /> <br />Smithy's model support library, schematic-js, uses the schema to produce frozen javascript objects that conform to the schema and provide convenient facilities for safely manipulating the model. </p>\n</div>\n", "highlightBegin" : "^.", "highlightEnd" : ".$", "order" : 0, "sourceFile" : "code-snippets/sampleschema.js" }
{ "__v" : 0, "_id" : { "$oid" : "51c20ec7e8a74fec1e000007" }, "content" : "<div class=\"lesson\" id=\"7\">\n    <h3>Model Validation</h3>\n<p>Schematic provides a plugin capability for validation similar to that provided by circuits. Schematic comes with several validator plugins, but custom plugins can easily be provided. Plugins are added to the model factory and based on the plugin configuration are automatically associated with the models and properties when models are created. The code below illustrates a module that configures validators for a passed factory using some of the provided validators. Validation occurs on a per-property basis when properties are set.</p>\n</div>\n", "highlightBegin" : "^.", "highlightEnd" : ".$", "order" : 2, "sourceFile" : "code-snippets/modelValidation.js" }
{ "__v" : 0, "_id" : { "$oid" : "51c20ef3e8a74fec1e000008" }, "content" : "<div class=\"lesson\" id=\"7\">\n    <h3>Operating On Models</h3>\n<p>Schematic's model factory and models provide many convenient ways to operate on models such as model surrogates, pre-initialized models, change events and natural property setting. The code below describes some of these facilities.</p>\n</div>\n", "highlightBegin" : "^.", "highlightEnd" : ".$", "order" : 1, "sourceFile" : "code-snippets/modeloperations.js" }
{ "__v" : 0, "_id" : { "$oid" : "51c20fbbe8a74fec1e000009" }, "content" : "<div class=\"lesson\" id=\"9\">\n    <h3>ioc! AMD plugin</h3>\n<p>If your application uses modules that return constructors, the ioc plugin lets your application describe a set of spring-ioc-like &quot;beans&quot; in an independent json configuration file. Once configured, the application can load the pre-configured beans as dependencies directly. The code below shows such a configuration file. Three beans are declared showing how the type (the AMD path to the module) and the params to the constructor are declared. The example also shows that it is possible to reference another bean in a bean's parameters by using the ref: keyword and the module path of the other bean. A bean is referenced in a dependency list using the pluign notation and the bean name like: amd-plugins/ioc!serviceFactory</p>\n</div>\n", "highlightBegin" : "^.", "highlightEnd" : ".$", "order" : 0, "sourceFile" : "code-snippets/iocplugin.js" }
{ "__v" : 0, "_id" : { "$oid" : "51c21152e8a74fec1e00000b" }, "content" : "<div class=\"lesson\" id=\"9\">\n    <h3>jsonschema! AMD plugin</h3>\n<p>The jsonschema plugin loads and resolves a JSONSchema schema so that all $ref's to other models are loaded and resolved and attached to the schema object. The code below uses it to load a service descriptor.</p>\n</div>\n", "highlightBegin" : "^.", "highlightEnd" : ".$", "order" : 1, "sourceFile" : "code-snippets/jsonschemaplugin.js" }
{ "__v" : 0, "_id" : { "$oid" : "51c33fb10bb35ce004000001" }, "content" : "<div class=\"lesson\" id=\"9\">\n    <h3>Using Extended Windows</h3>\n<p>Smithy supports any number of extended windows. It creates them automatically in response to creating areas with \"window[x]\" in the address. The main application page is always the first window (\"window[0]\"), other windows are created based on configuration passed to the gadget space. An extended window is based on a page and the contents of that page must follow a particular pattern. The code below shows a typical extended window page.</p>\n</div>\n", "highlightBegin" : "^.", "highlightEnd" : ".$", "order" : 0, "sourceFile" : "ExtendedWindow.html" }
{ "__v" : 0, "_id" : { "$oid" : "51c33fd20bb35ce004000003" }, "content" : "<div class=\"lesson\" id=\"9\">\n    <h3>Global Persistent Application Data</h3>\n<p>Smithy provides a light-weight client-side data repository called Slag. It allows an application to make global data available to its gadgets. Slag data can be persisted to different levels of Web Storage via configuration passed to the gadget space. Slag provides notifications of changes in it's data using bullhorn. The code below illustrates how to make use of slag data.</p>\n</div>\n", "highlightBegin" : "^.", "highlightEnd" : ".$", "order" : 0, "sourceFile" : "code-snippets/slagexample.js" }
{ "__v" : 0, "_id" : { "$oid" : "51cb29890e09bd3019000001" }, "content" : "<div class=\"lesson\" id=\"0\">\n    <h2>Project Structure</h2><p class=\"Summary\">This full tutorial is available on <a href=\"https://github.com/atsid/smithy-tutorial\" target=\"_self\">github</a>, but that project also includes the code for the gadgets your looking at on this page and the server that provides the backend. The following is a project structure culled from the full tutorial that creates a simpler <a href=\"demo-only.html\" target=\"_blank\">application</a>:</p>demo-app <br />   index.html<br />   Gadgets.js<br />   main.js<br />   css<br />      style.css<br />   gadgets<br />      BaseDemoGadget.js<br />      FriendFeedGadget.js<br />      NewsGadget.js<br />      SearchGadget.js<br />      StockGadget.js<br />   schema<br />      channels<br />         SearchUpdate.js<br />      models<br />         GenericJsonp<br />      services<br />         FriendFeedService<br />         YqlService<br /><ul>\n</ul>\n</div>\n", "highlightBegin" : "^.", "highlightEnd" : ".$", "order" : 0, "sourceFile" : "" }
{ "__v" : 0, "_id" : { "$oid" : "51cb47040e09bd3019000005" }, "content" : "<div class=\"lesson\" id=\"0\">\n    <h3>Root Page</h3><p class=\"Summary\">\n<p>The html file shown below is identical to the html file described in the \"Putting it all together\" paragraph of Lesson 1.</p>\n</div>\n", "highlightBegin" : "^.", "highlightEnd" : ".$", "order" : 0, "sourceFile" : "demo-only.html" }
{ "__v" : 0, "_id" : { "$oid" : "51cb47430e09bd3019000007" }, "content" : "<div class=\"lesson\" id=\"0\">\n    <h3>Pre-load Gadgets</h3>\n<p>This file exists only to asynchronously pre-load the gadgets used by the tutorial. </p>\n</div>\n", "highlightBegin" : "^.", "highlightEnd" : ".$", "order" : 0, "sourceFile" : "code-snippets/Gadgets.js" }
{ "__v" : 0, "_id" : { "$oid" : "51cb47c40e09bd3019000009" }, "content" : "<div class=\"lesson\" id=\"0\">\n    <h3>Express Application</h3>\n<p>Main.js is a simple express app to serve the pages.</p>\n</div>\n", "highlightBegin" : "^.", "highlightEnd" : ".$", "order" : 0, "sourceFile" : "code-snippets/main.js" }
{ "__v" : 0, "_id" : { "$oid" : "51cb485e0e09bd301900000b" }, "content" : "<div class=\"lesson\" id=\"0\">\n    <h3>Base Class for the Demo Gadgets</h3>\n<p>The class below provides some general functionality for the rest of the gadgets including default implementations of the the two gadget life-cycle methods, setupView() and setupMessaging().</p>\n</div>\n", "highlightBegin" : "^.", "highlightEnd" : ".$", "order" : 0, "sourceFile" : "gadgets/BaseDemoGadget.js" }
{ "__v" : 0, "_id" : { "$oid" : "51cb487f0e09bd301900000d" }, "content" : "<div class=\"lesson\" id=\"0\">\n    <h3>friendfeed Gadget</h3>\n<p>The gadget below displays friendfeed data for the search term published by the SearchGadget. It includes a jsonp service call to friendfeed.</p>\n</div>\n", "highlightBegin" : "^.", "highlightEnd" : ".$", "order" : 0, "sourceFile" : "gadgets/FriendFeedGadget.js" }
{ "__v" : 0, "_id" : { "$oid" : "51cb491a0e09bd301900000f" }, "content" : "<div class=\"lesson\" id=\"0\">\n    <h3>Yahoo Finance News Gadget</h3>\n<p>The gadget below displays Yahoo finance news for the search term published by the SearchGadget. It includes a jsonp service call to Yahoo Finance.</p>\n</div>\n", "highlightBegin" : "^.", "highlightEnd" : ".$", "order" : 0, "sourceFile" : "gadgets/NewsGadget.js" }
{ "__v" : 0, "_id" : { "$oid" : "51cb492f0e09bd3019000011" }, "content" : "<div class=\"lesson\" id=\"0\">\n    <h3>Search Term Gadget</h3>\n<p>The gadget below allows the user to enter a search term and publishes that term on the SearchUpdate channel for other gadgets to listen to.</p>\n</div>\n", "highlightBegin" : "^.", "highlightEnd" : ".$", "order" : 0, "sourceFile" : "gadgets/SearchGadget.js" }
{ "__v" : 0, "_id" : { "$oid" : "51cb494d0e09bd3019000013" }, "content" : "<div class=\"lesson\" id=\"0\">\n    <h3>Stock Quote Gadget</h3>\n<p>A Gadget to display a stock quote from Yahoo finance.</p>\n</div>\n", "highlightBegin" : "^.", "highlightEnd" : ".$", "order" : 0, "sourceFile" : "gadgets/StockGadget.js" }
{ "__v" : 0, "_id" : { "$oid" : "51cb497c0e09bd3019000015" }, "content" : "<div class=\"lesson\" id=\"0\">\n    <h3>Channel Schema</h3>\n<p>A schema for the SearchUpdate channel used by all gadgets in the application  to send/receive notification of the search term change.</p>\n</div>\n", "highlightBegin" : "^.", "highlightEnd" : ".$", "order" : 0, "sourceFile" : "schema/channels/SearchUpdate.js" }
{ "__v" : 0, "_id" : { "$oid" : "51cb49960e09bd3019000017" }, "content" : "<div class=\"lesson\" id=\"0\">\n    <h3>Simple Model Schema</h3>\n<p>A simple model schema describing a raw return that is interpreted individually by the gadgets.</p>\n</div>\n", "highlightBegin" : "^.", "highlightEnd" : ".$", "order" : 0, "sourceFile" : "schema/models/Genericjsonp" }
{ "__v" : 0, "_id" : { "$oid" : "51cb49b20e09bd3019000019" }, "content" : "<div class=\"lesson\" id=\"0\">\n    <h3>friendfeed Service Descriptor</h3>\n<p>The service descriptor for the friendfeed service.</p>\n</div>\n", "highlightBegin" : "^.", "highlightEnd" : ".$", "order" : 0, "sourceFile" : "schema/services/FriendFeedService" }
{ "__v" : 0, "_id" : { "$oid" : "51cb49c40e09bd301900001b" }, "content" : "<div class=\"lesson\" id=\"0\">\n    <h3>Yahoo Finance Service Descriptor</h3>\n<p>The service descriptor for the Yahoo Finance service.</p>\n</div>\n", "highlightBegin" : "^.", "highlightEnd" : ".$", "order" : 0, "sourceFile" : "schema/services/YqlService" }
